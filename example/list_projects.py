import getpass
from typing import List

from ecosuite_python import AuthenticatedClient
from ecosuite_python.api.energy import status
from ecosuite_python.models.energy_status_sites import EnergyStatusSites
from ecosuite_python.models.error import Error

from pycognito import Cognito
from pycognito.exceptions import SoftwareTokenMFAChallengeException

username = input("Ecosuite username: ")

# The first two parameters are fixed
u = Cognito('us-east-1_7BBBhGf1p','6fk3ot5ut181jt7r2pdp9h6m5q', username=username)

# It's likely that we need to handle a MFA
try:
    u.authenticate(password=getpass.getpass())
except SoftwareTokenMFAChallengeException as error:
    code = getpass.getpass(prompt='Enter the 6-digit code generated by the TOTP generator (such as Google Authenticator): ')
    resp = u.respond_to_software_token_mfa_challenge(code)

print("Authenticated with Ecosuite")

# Use the id token for the Authorization header
client = AuthenticatedClient(base_url="https://api.ecosuite.io", token=u.id_token)

# Use the async function if needed
result = status.sync(client=client)

def print_devices(system):
    for device in system["devices"]:
        print(f'\t\t\t- /{device["type"]}/{device["id"]}')

if isinstance(result, Error):
    print(f'Failed to fetch projects: ${result.message}')
else:
    if result is None:
        print("Status missing from response")
    else:
        if isinstance(result.projects, List):

            # For each project,
            for project in result.projects:
                print(f'{project.name} [{project.code}]')

                # If the API gave us any sites,
                if isinstance(project.sites, EnergyStatusSites):

                    # Convert the sites to a dictionary
                    for site_name, site in project.sites.to_dict().items():
                        print(f'\t{site["name"]} [{site["code"]}]')

                        for system_name, system in site["systems"].items():
                            print(f'\t\t{system["name"]} [{system["code"]}]')
                            print_devices(system)



